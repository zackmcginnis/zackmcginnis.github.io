{"version":3,"sources":["store/reducers/address.js","store/actions/constants.js","store/reducers/index.js","store/index.js","components/Address/address.js","store/actions/address.js","App.js","serviceWorker.js","index.js"],"names":["addressReducer","state","type","payload","combineReducers","address","middleware","thunk","withDevTools","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","Address","props","e","this","setState","target","value","console","log","getAddressReceiveHistory","onChange","handleChange","onClick","handleClick","Component","connect","dispatch","fetch","then","res","json","amount_received","App","store","className","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4f6ba42f.chunk.js","sourcesContent":["import {GET_ADDRESS_HISTORY} from '../actions/constants'\n\nconst addressReducer = (state = [], {type, payload}) => {\n    switch (type) {\n      case GET_ADDRESS_HISTORY:\n        return payload\n      default:\n        return state\n    }\n}\n\nexport default addressReducer;\n","export const GET_ADDRESS_HISTORY = \"GET_ADDRESS_HISTORY\";\n","import {combineReducers} from 'redux';\nimport addressReducer from './address';\n\nexport default combineReducers({\n  address: addressReducer\n})\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst middleware = [\n  thunk\n]\nconst withDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default createStore(rootReducer, withDevTools(\n  applyMiddleware(...middleware)\n))\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport {connect } from 'react-redux';\nimport {getAddressReceiveHistory} from '../../store/actions/address'\nimport './address.css';\n\nclass Address extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: ''\n    };\n  }\n\n  static propTypes = {\n    getAddressReceiveHistory: PropTypes.func.isRequired\n  }\n\n  componentDidMount() {\n  }\n\n  handleChange(e) {\n    this.setState({ address: e.target.value });\n  }\n\n  handleClick(){\n    console.log(this.state.address)\n    this.props.getAddressReceiveHistory(this.state.address)\n  }\n\n  render() {\n\n    return (\n      <div>\n        <input type=\"text\" onChange={ (e) => this.handleChange(e) } />\n        <input\n          type=\"button\"\n          value=\"Alert the text input\"\n          onClick={ (e) => this.handleClick(e)}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  address: state.address\n})\n\nconst dispatchToProps = (dispatch) => ({\n  getAddressReceiveHistory: (address) => dispatch(getAddressReceiveHistory(address))\n})\n\nexport default connect(mapStateToProps, dispatchToProps)(Address);\n","import {GET_ADDRESS_HISTORY} from './constants';\nconst blockchain_api_url = `https://blockchain.info/q`\n\nexport const getAddressReceiveHistory = (address) => dispatch => {\n  const get_received = 'getreceivedbyaddress'\n  return fetch(`${blockchain_api_url}/${get_received}/${address}`)\n    .then(res => res.json())\n    .then(amount_received => dispatch({type: GET_ADDRESS_HISTORY, payload: amount_received}))\n}\n","import React, { Component } from 'react'\nimport { Provider } from 'react-redux'\nimport './App.css'\nimport store from './store'\nimport Address from './components/Address/address'\n\nclass App extends Component {\n\n  render () {\n    return (\n      <Provider store={ store }>\n        <div className=\"App\">\n          <Address/>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}