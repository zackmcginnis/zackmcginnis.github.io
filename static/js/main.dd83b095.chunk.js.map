{"version":3,"sources":["store/reducers/address.js","store/actions/constants.js","store/reducers/index.js","store/index.js","components/Address/address.js","store/actions/address.js","App.js","serviceWorker.js","index.js"],"names":["addressReducer","state","type","payload","combineReducers","address","middleware","thunk","withDevTools","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","Address","props","header","result","error","displayResult","bind","e","this","setState","target","value","console","log","getAddressReceiveHistory","reason","onChange","handleChange","onClick","handleClick","Component","connect","dispatch","fetch","then","res","json","amount_received","App","store","className","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dd83b095.chunk.js","sourcesContent":["import {GET_ADDRESS_HISTORY} from '../actions/constants'\n\nconst addressReducer = (state = [], {type, payload}) => {\n    switch (type) {\n      case GET_ADDRESS_HISTORY:\n        return payload\n      default:\n        return state\n    }\n}\n\nexport default addressReducer;\n","export const GET_ADDRESS_HISTORY = \"GET_ADDRESS_HISTORY\";\n","import {combineReducers} from 'redux';\nimport addressReducer from './address';\n\nexport default combineReducers({\n  address: addressReducer\n})\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst middleware = [\n  thunk\n]\nconst withDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default createStore(rootReducer, withDevTools(\n  applyMiddleware(...middleware)\n))\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport {connect } from 'react-redux';\nimport {getAddressReceiveHistory} from '../../store/actions/address'\nimport './address.css';\n\nclass Address extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: '',\n      header: 'Enter a BTC address to verify it has not been used',\n      result: '',\n      error: false\n    };\n\n    this.displayResult = this.displayResult.bind(this);\n  }\n\n  static propTypes = {\n    getAddressReceiveHistory: PropTypes.func.isRequired\n  }\n\n  componentDidMount() {\n  }\n\n  handleChange(e) {\n    this.setState({ address: e.target.value });\n  }\n\n  async handleClick(){\n    console.log(this.state.address)\n    try {\n      const result = await this.props.getAddressReceiveHistory(this.state.address)\n\n      if(result.payload.reason) {\n        this.setState({error: true})\n      } else {\n        this.setState({result: result.payload})\n      }\n\n      console.log(result)\n    } catch (err) {\n      console.log(err)\n      this.setState({error: true})\n    }\n\n    this.displayResult()\n  }\n\n  displayResult() {\n    if(this.state.error) {\n      return `Invalid address`\n    }\n\n    // if we don't have a result yet\n    if(this.state.result === '') {\n      return `Enter a valid BTC address`\n    }\n\n    // if the address has received btc in the past\n    // test: 1EnJHhq8Jq8vDuZA5ahVh6H4t6jh1mB4rq\n    if(this.state.result > 0) {\n      return `This address has received ${this.state.result} satoshis`\n    } else {\n      // if the address has not received btc yet\n      // test: 3MsUbTHEAgvgVgRgpR8fCbS27wjZyHJPwr\n      return `This address has not received BTC yet`\n    }\n  }\n\n  render() {\n\n    return (\n      <div>\n        <h3>{this.state.header}</h3>\n        <input type=\"text\" onChange={ (e) => this.handleChange(e) } />\n        <input\n          type=\"button\"\n          value=\"Submit\"\n          onClick={ (e) => this.handleClick(e)}\n        />\n        <div>\n          {this.displayResult()}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  address: state.address\n})\n\nconst dispatchToProps = (dispatch) => ({\n  getAddressReceiveHistory: (address) => dispatch(getAddressReceiveHistory(address))\n})\n\nexport default connect(mapStateToProps, dispatchToProps)(Address);\n","import {GET_ADDRESS_HISTORY} from './constants';\nconst blockchain_api_url = `https://blockchain.info/q`\n\nexport const getAddressReceiveHistory = (address) => dispatch => {\n  const get_received = 'getreceivedbyaddress'\n  return fetch(`${blockchain_api_url}/${get_received}/${address}`)\n    .then(res => res.json())\n    .then(amount_received => dispatch({type: GET_ADDRESS_HISTORY, payload: amount_received}))\n}\n","import React, { Component } from 'react'\nimport { Provider } from 'react-redux'\nimport './App.css'\nimport store from './store'\nimport Address from './components/Address/address'\n\nclass App extends Component {\n\n  render () {\n    return (\n      <Provider store={ store }>\n        <div className=\"App\">\n          <Address/>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}